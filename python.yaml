title: Python
questions:
  - question: "En Python, comment qu'est-ce qui symbolise les limites d'un contexte: des parenthèses (`{` et `}`) ou l'indentation ?"
    answer: "L'indentation!"
  - question: "Quelle est la différence entre `=` et `==` en Python ?"
    answer: "`=` sert à affecter une valeur à une variable, `==` sert à tester l'égalité entre deux valeurs"
  - question: "En Python, comment écrit-on la valeur « rien » (équivalent de `null` en Java ou JS) ?"
    answer: "`None`"
  - question: "Quel est le résultat de l’expression `len(\"Python\")` ?"
    answer: "`6` (`len` appliqué à une chaîne donne sa longueur)"
  - question: "Que va afficher ce code ? `print(\"Python\"[::-1])`"
    answer: "`nohtyP` (chaîne inversée)"
  - question: "Comment appelle-t-on cette syntaxe Python ? `{x**2 for x in range(4)}`"
    answer: "c'est une `set comprehension` (ensemble en compréhension). Existe aussi pour les listes (`list comprehension`) mais PAS pour les tuples"
  - question: "Quelle est la complexité en temps moyenne de l'accès à une valeur dans un dictionnaire Python (`dict[key]`) ?"
    answer: "`O(1)` en moyenne (`dict` = `hash map`)"
  - question: "En Python, que renvoient les deux expressions suivantes : `[] == []` et `[] is []` ?"
    answer: "`[] == []` -> `True` (mêmes valeurs). `[] is []` -> `False` (objets distincts en mémoire)"
  - question: "En Python, qu’est-ce qu'un `decorator` et à quoi sert-il ?"
    answer: "Un `decorator` est une fonction qui prend une fonction (ou classe) en paramètre et renvoie une version modifiée -> sert à ajouter du comportement sans modifier le code d'origine (ex. `@staticmethod`, `@property`)"
  - question: "En Python 3, pourquoi `hash(1) == hash(True)` est évalué à `True` ?"
    answer: "Parce que `bool` hérite de `int` en Python -> `True` est littéralement l'entier `1`, donc ils ont le même `hash`."